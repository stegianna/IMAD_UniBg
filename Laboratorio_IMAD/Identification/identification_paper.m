% Author: Simone Formentin, Mirko Mazzoleni
% Date: 13/12/2017

%% Load data
% SEE PAPER:
% "A comparison of model-based and data-driven controller tuning"
% Simone Formentin, Klaske van Heusden and Alireza Karim
% INTERNATIONAL JOURNAL OF ADAPTIVE CONTROL AND SIGNAL PROCESSING

clear;
close all;
clc;
set(0,'DefaultLineLineWidth',2)


load identification.mat
% Input: PRBS voltage command to brushless motor
% Output: Posizione angolare piattello misurata dall'encoder
Ts = 0.06; % 60ms Sampling time


%% PRBS Input signal
% pseudo random binary signal, has a spectrum which is flat like a white
% noise, even flatter: infact, the "true" white noise is only a theoretical
% signal, in the reality is has a band-pass spectrum

L = 2047; % Period of the PRBS
P = 1; % number of periods
N = L*P;

prbs = idinput([L 1 P], 'prbs', [], [-0.5, 0.5]); % generate prbs input 
figure(); plot(prbs, 'bo-'); xlim([0, round(L/10)]); ylim([-0.6, 0.6]); grid on;
yticks([-0.5, 0.5]); xlabel('Samples [-]'); ylabel('Amplitude');

% Compute autocorrelation of the prbs
maxlag = 100;
[autoCorr,lags] = xcorr(prbs, 'coeff', maxlag);
figure(); plot(lags, autoCorr, 'b'); grid on; xlabel('Lag'); ylabel('Correlation');
xlim([-maxlag, maxlag]);


%% Pre-processing

% Remove transient and initial condition effects. I suppose that the
% transient is null after one period, that is: 255 * 0.06s = 15.36s

L = 255; % period of the prbs used in the experiment
index1 = L + 1; % Remove first prbs period
index2 = L * 6; 

N = index2 - index1 + 1; % Data length
u = prova(index1:index2, 4); % Input prbs
y = prova(index1:index2, 2); % Output encoder
data_raw = iddata(y, u, Ts); % create identification data object
data = detrend(data_raw); % detrend data

figure;
plot(data_raw, 'b'); hold on;
plot(data, 'r'); grid on; xlim([0, N*Ts]);
set(findall(gcf,'type','line'), 'linewidth', 2)


%% Order selection

% Try ARX(n) with n = 1..10. I choose the ARX model because I want a convex
% cost function
max_ar_order = 10;
J = zeros(1, max_ar_order); % cost functions vector
for a = 1:max_ar_order
    fprintf('Identifying model %i', a); fprintf('\n');
    orders = [a a 1]; % use the same parameter for autoregressive and exogenous part
    model = arx(data, orders);
    J(a) = model.Report.Fit.LossFcn; 
end

figure;
plot(J, 'bo-'); title('Loss function'); xlabel('Order'); ylabel('J')
% chosen order = 6. If the model is ARX, it would be ARX(6)


%% Order Checking - pole/zero cancelation

% Order estimation using ARMAX. The ARX model does not model the error completely,
% let's try to model the error with an ARMAX starting from the ARX
% evaluations

orders = [6 6 6 1];
N6 = armax(data, orders);
figure; h = iopzplot(N6); showConfidence(h); % plot poles/zeros to se cancellations
set(findall(gcf,'type','line'), 'linewidth', 2);


orders = [7 7 7 1];
N7 = armax(data, orders);
figure; h = iopzplot(N7); showConfidence(h);
set(findall(gcf,'type','line'), 'linewidth', 2); % we can se cancellations


orders = [8 8 8 1];
N8 = armax(data, orders);
figure; h = iopzplot(N8); showConfidence(h);
set(findall(gcf,'type','line'), 'linewidth', 2); % we can se cancellations


orders = [9 9 9 1];
N9 = armax(data, orders);
figure; h = iopzplot(N9); showConfidence(h);
set(findall(gcf,'type','line'), 'linewidth', 2); % we can se cancellations


orders = [10 10 10 1];
N10 = armax(data, orders);
figure; h = iopzplot(N10); showConfidence(h);
set(findall(gcf,'type','line'), 'linewidth', 2); % we can se cancellations


% chosen order = 6. Other orders show high uncertainty or cancellation,
% symptom of over-parametrization

%% Delay estimation

% If a value is inside is standard devation, this means that it can be a
% null value
orders = [6 6 6 1];
armax6661 = armax(data, orders);
present(armax6661) % show advanced properties of the estimation


% Look at the z^-1 term of the B(z) polynomial -6.916e-05 (+/- 9.485e-05)
% z^-1. It is very small compared to its standard deviation. 
% That standard deviation is high enough to bring the coefficients to zero. 
% It is better to start from z^-2, which standard deviation is not high 
% enough to bring it to zero ( 0.001316 (+/- 0.0001397) z^-2 )

Delay = 2;

%% Model structure selection

% Data partitioning
data_ident = iddata(y(1:3*L), u(1:3*L), Ts);
data_ident = detrend(data_ident); 

my = mean(y(1:3*L));
mu = mean(u(1:3*L));

% Detrend validation data with information from identification data
data_valid = iddata(y(3*L+1:5*L) - my, u(3*L+1:5*L) - mu, Ts);

% ARX
% 6 - Delay + 1 in order to make all polynomial the same order
orders = [6 6-Delay+1 Delay];
arx652 = arx(data_ident,orders);


% IV: Instrumental variable. 
% Suppose that the data are generated by an ARMAX, but we estimate an ARX because:
%   - Simplicity 
%   - We want to estimate B(z)/A(z) EXACTLY, even if the model structure we have
%   chosen is wrong
% Design of a new variable Epsilon(t) s.t.:
%  - well correlated with phi(t) (vector of data)
%  - not correlated wit C(z)*e(t) => e(t) + c1*e(t-1)....
iv652 = iv4(data_ident, orders);


% ARMAX
orders = [6 6-Delay+1 6 Delay];
armax6562 = armax(data_ident, orders);


% Output Error model: it is supposed that the outputs depends only on u(t),
% and then there is the addition of the erorr. The only cause of error is 
% the error on the measurement
% Similar to ad ARX but there is not the same polynomial which divides u(t)
% and e(t)
orders = [6-Delay+1 6 Delay];
oe562 = oe(data_ident, orders); 


% Box-Jenkins
orders = [6 6-Delay+1 6 6 Delay];
bj562 = bj(data_ident, orders); 



%% TEST 1: TRASFER FUNCTION EVALUATION

G_hat = spafdr(data_ident);

figure
bode(arx652, 'b-', iv652, 'g-', armax6562, 'r-', oe562, 'c-', bj562, 'm-', G_hat, 'k--');
legend('ARX', 'IV', 'ARMAX', 'OE', 'BJ', 'DATA'); 
set(findall(gcf,'type','line'), 'linewidth', 2); grid on;

% The best model is ARMAX or BJ


%% TEST 2: FITTING EVALUATION

figure;
compare(data_valid, arx652, 'b', iv652, 'g', armax6562, 'r', oe562, 'c', bj562, 'm');
legend('DATA', 'ARX', 'IV', 'ARMAX', 'OE', 'BJ'); 
set(findall(gcf,'type','line'), 'linewidth', 2); grid on;

% The best model is OE or ARX


%% TEST 3: CONFIDENCE INTERVAL EVALUATION

% Residual autocorrelation: if the true system belogns to the chosen model
% family, residual will be a WN. Rarely it will be as this.

% We are intrerested in the correlation between residual and the input signal.
% I want that, idependently of the input, the relation input-ouput will remain
% the same.

figure;
resid(arx652, data_valid); set(findall(gcf,'type','line'), 'linewidth', 2); grid on;


figure;
resid(iv652, data_valid); set(findall(gcf,'type','line'), 'linewidth', 2); grid on;


figure;
resid(armax6562, data_valid); set(findall(gcf,'type','line'), 'linewidth', 2); grid on;


figure;
resid(oe562, data_valid); set(findall(gcf,'type','line'), 'linewidth', 2); grid on;


figure;
resid(bj562, data_valid); set(findall(gcf,'type','line'), 'linewidth', 2); grid on;


% The best model is ARMAX or OE

% THE BEST MODEL is OE, because it is the best out of 3 tests!


% OE is not good to make prediction because it does not model well the
% noise, bu we are interested in the I/O relationship

% The prediction error is white is the system belongs to the chosen 
% models class. We are interested in the I/O relationship. What is wrong in
% the model structure, goes into the error term. This will help us to
% identify the parameters of the I/O part that base approximates the true
% system.



